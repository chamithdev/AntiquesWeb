@model  VendorModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)


@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "vendor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var total = Model.Products.Count > 0 ? Model.Products[0].TotalCount : 0;
    var pages = total / defaultGridPageSize;
}
<script>
    var baseUrl = "/admin/";
    $(document).ready(function () {

        Dropzone.autoDiscover = false;
        $("#dz").dropzone(
            {
                url: "/admin/vendor/UploadVendorImages/@Model.Id",
                uploadprogress: function (e, progress) {
                    $('.fader').show();
                },
                success: function () {
                    $('.fader').hide();
                },
                error: function () {
                    alert('error uploading data');
                },

            });

        $(function () {

            var original = $('#sortable').sortable('toArray').toString();
            var originalArr =  original.split(',');
            //$("#sortableImg").sortable();
            //$("#sortableImg").disableSelection();

            $("#sortable").sortable({
                connectWith: "#sortable",
                update: function () {
                    var order1 = $('#sortable').sortable('toArray').toString();
                    var picNos = order1.split(',');
                    var prods = [];
                    for (i = 0; i < picNos.length; i++) {
                        var prod = new Object();
                        var oraOrder = originalArr.indexOf(picNos[i])
                        prod.Id = picNos[i];
                        prod.DisplayOrder = oraOrder - i;
                        prods.push(prod);

                    }
                    @*$(order1).each(function (idx, i) {

                        var prodPic = new Object();

                        prodPic.PictureId = i;
                        prodPic.ProductId = @Model.Id;
                        prodPic.DisplayOrder = idx++;
                        prodPics.push(prodPic);

                    });*@

                    ajaxPostJson("Vendor", "UpdateProductOrder", prods, function (data) {
                        prods = [];
                    }, null);

                }
            }).disableSelection();



        });

        ajaxPostJson = function (controller, method, jsonIn, callback, errorCallback) {
            $.ajax({
                url: baseUrl + controller + "/" + method,
                type: "POST",
                data: JSON.stringify(jsonIn),
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    $('.fader').show();
                },
                success: function (json) {
                    callback(json);
                    $('.fader').hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('.fader').hide();
                    if (errorCallback != undefined)
                        errorCallback(xhr);
                    alert(thrownError);
                }
            });
        }


        ajaxGetData = function (controller, method, param, callback) {
            $.ajax({
                url: baseUrl + controller + "/" + method,
                type: "GET",
                cache: false,
                data: param,
                beforeSend: function () {
                    $('.fader').show();
                },
                success: function (json) {
                    callback(json);
                    $('.fader').hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('.fader').hide();
                    if (errorCallback != undefined)
                        errorCallback(xhr);
                    alert(thrownError);
                }
            });
        }




    });
    
    function pagerClick(pageNo) {
        var pageList = new Object();
        pageList.VendorId = @Model.Id;
        pageList.PageIndex = pageNo;

            
        ajaxGetData("Vendor", "PagedProductList", pageList, function (data) {
            $("#sortable").html(data);
            $("#sortable li").removeClass("active");
            $('#'+pageNo).addClass("active");
            //class="active" 
        }, null);


    };


    $(document).ready(function () {


        ajaxGetDataParam = function (controller, method, param, callback) {
            $.ajax({
                url: baseUrl + controller + "/" + method +"/"+param,
                type: "GET",
                cache: false,
                data: param,
                beforeSend: function () {
                    $('.fader').show();
                },
                success: function (json) {
                    callback(json);
                    $('.fader').hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('.fader').hide();
                    if (errorCallback != undefined)
                        errorCallback(xhr);
                    alert(thrownError);
                }
            });
        };

        ajaxGetDataMultiple = function (controller, method, param, callback) {
            $.ajax({
                url: baseUrl + controller + "/" + method,
                type: "GET",
                cache: false,
                data: param,
                beforeSend: function () {
                    $('.fader').show();
                },
                success: function (json) {
                    callback(json);
                    $('.fader').hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('.fader').hide();
                    if (errorCallback != undefined)
                        errorCallback(xhr);
                    alert(thrownError);
                }
            });
        }
    });


    function Soldout(id)
    {
        ajaxGetDataParam("Vendor", "SoldOut", id, function () {            
            window.location.reload(true);
        });
    }
    function MoveToPage(id,page) 
    {
        ajaxGetDataMultiple("Vendor", "MoveToPage", { 'productId': id, 'page': page }, function () {
            window.location.reload(true);
        });
    }
  
</script>
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.PictureId)
<div id="body-content">
    <div class="container">
        <div class="section-pannel">
            <div class="row">
                <div class="btn-pan">
                    @*<input type="button" value="Upload Page" class="btn btn-default" />
                    <input type="button" value="Preview Page" class="btn btn-default" />*@
                    <input type="submit" value="Submit" class="btn btn-default" />
                </div>
                <div class="ad-search-wrap clear">
                    <div class="col-sm-6 col-md-3">
                        <div class="img-upload">

                            <!-- Change /upload-target to your upload address -->
                            @*<form action="/upload-target" class="dropzone custom-msg-main"></form>*@
                            <div id="dz" class="dropzone" action="/vendor/UploadVendorImages/@Model.Id">
                                @*<div class="dz-default dz-message"></div>*@
                                @if (Model.PictureId > 0)
                                {
                                    <img src="@Model.MainPictureModel.PictureUrl" title="Click here" class="dz-message" />
                                }

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-7">
                        Name
                        @Html.EditorFor(model => model.Name, new { @class = "percent-42" })
                        @Html.ValidationMessageFor(model => model.Name)
                        Town
                        @Html.EditorFor(model => model.City, new { @class = "percent-42" })
                        Country
                        @Html.EditorFor(model => model.Country, new { @class = "percent-42" })
                        <br />
                        Website
                        @Html.EditorFor(model => model.Web, new { @class = "percent-42" })
                        Email
                        @Html.EditorFor(model => model.Email, new { @class = "percent-42" })
                        @Html.ValidationMessageFor(model => model.Email)
                        <br />
                        About us
                        @Html.EditorFor(x => x.Description, new { @class = "percent-42" })
                        @Html.ValidationMessageFor(model => model.Description)
                        <br/>
                        @if(Model.DisplayActive)
                        {
                            <text>Active</text>
                            @Html.EditorFor(x => x.Active, new { @class = "percent-42" })
                        }else
                        {
                            @Html.HiddenFor(x => x.Active)
                        }
                        

                    </div>
                    <div class="col-sm-6 col-md-2">
                        @*<input type="button" value="Edit Home Page" class="btn btn-default btn-info percent-100 margin-bottom10" />*@
                        <a href="@Url.Action("Createib", "product", new { area = "admin" }, null)" class="btn btn-default btn-info percent-100 margin-bottom10">Load New Product</a>
                        @*<input type="button" value="Update Directory" class="btn btn-default btn-info  percent-100 margin-bottom10" />*@
                        @*<a href="@Url.Action("UpdateDirectoryib", "vendor", new { area = "admin", vendorId =@Model.Id}, null)" class="btn btn-default btn-info percent-100 margin-bottom10">Update Directory</a>*@
                            @*<input type="button" value="Guest Editor" class="btn btn-default btn-info  percent-100 margin-bottom10" />*@
                            <a href="@Url.Action("Logout", "Customer", new { area = "" }, null)" class="btn btn-default btn-info  percent-100 margin-bottom10">Log Out</a>

</div>
                </div>
            </div>
            <div class="row" >
                <ul id="sortable" class="clear">
                    @Html.Partial("_VendorProduct", Model.Products)

                </ul>
            </div>



        </div>
            <div class="page-wrap">
                <ul class="pagination">
                    <li onclick="pagerClick(0)"><a href="#">&laquo;</a></li>
                    @for (int x = 0; x < pages; x++)
                    {
                        <li id="@x" onclick="pagerClick(@x)"><a href="#">@(x+1)</a></li>
                    }

                    @*<li><a href="#">2</a></li>
                    <li><a href="#">3</a></li>
                    <li><a href="#">4</a></li>
                    <li><a href="#">5</a></li>*@
                    <li onclick="pagerClick(@(pages-1))"><a href="#">&raquo;</a></li>
                </ul>
            </div>
        </div>
</div>
